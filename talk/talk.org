#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:nil
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:900
#+OPTIONS: toc:nil reveal_slide_number:"c/t"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+REVEAL_ROOT: ../../reveal.js/

# (setq org-reveal-title-slide-template "<h1>%t</h1><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")

#+TITLE: Desert Island Algorithms
#+AUTHOR: Ben Deane
#+EMAIL: bdeane@blizzard.com
#+DATE: Sometime 2016

* The Question
If you were stuck on a desert island, which algorithms would you take with you?
#+ATTR_REVEAL: :frag appear
Maybe some "building block" algorithms?
#+ATTR_REVEAL: :frag (appear)
 - ~partition~
 - ~rotate~
 - ~reverse~
#+ATTR_REVEAL: :frag appear
Maybe some others?
#+ATTR_REVEAL: :frag appear
Which algorithms are the most powerful?
#+ATTR_REVEAL: :frag appear
What if you couldn't write any loops, so you're stuck with what you have?

* The Algorithms (pre-C++17)
#+REVEAL_HTML: <div id="columns"> <div id="fiveup">
#+ATTR_REVEAL: :frag (none none none none none highlight-red none none none none none none none highlight-red none none none none none none none none none none none none none none none none none none none none highlight-red none highlight-red highlight-red none none none none none none none none none none none none none highlight-red highlight-red none none none highlight-red highlight-red none highlight-red highlight-red none none none none none none none none none none none none none none none none none none none none none none none highlight-red none none none none highlight-red) :frag_idx (1 1 1 1 1 4 1 1 1 1 1 1 1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 4 5 1 1 1 1 1 1 1 1 1 1 1 1 1 5 5 1 1 1 4 5 1 5 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 4)
 - ~accumulate~
 - ~adjacent_difference~
 - ~adjacent_find~
 - ~all_of~
 - ~any_of~
 - ~binary_search~
 - ~copy~
 - ~copy_backward~
 - ~copy_if~
 - ~copy_n~
 - ~count~
 - ~count_if~
 - ~equal~
 - ~equal_range~
 - ~fill~
 - ~fill_n~
 - ~find~
 - ~find_end~
 - ~find_first_of~
 - ~find_if~
 - ~find_if_not~
 - ~for_each~
 - ~generate~
 - ~generate_n~
 - ~includes~
 - ~inner_product~
 - ~inplace_merge~
 - ~iota~
 - ~is_heap~
 - ~is_heap_until~
 - ~is_partitioned~
 - ~is_permutation~
 - ~is_sorted~
 - ~is_sorted_until~
 - ~iter_swap~
 - ~lexicographical_compare~
 - ~lower_bound~
 - ~make_heap~
 - ~max~
 - ~max_element~
 - ~merge~
 - ~min~
 - ~min_element~
 - ~minmax~
 - ~minmax_element~
 - ~mismatch~
 - ~move~
 - ~move_backward~
 - ~next_permutation~
 - ~none_of~
 - ~nth_element~
 - ~partial_sort~
 - ~partial_sort_copy~
 - ~partial_sum~
 - ~partition~
 - ~partition_copy~
 - ~partition_point~
 - ~pop_heap~
 - ~prev_permutation~
 - ~push_heap~
 - ~random_shuffle~
 - ~remove~
 - ~remove_copy~
 - ~remove_copy_if~
 - ~remove_if~
 - ~replace~
 - ~replace_copy~
 - ~replace_copy_if~
 - ~replace_if~
 - ~reverse~
 - ~reverse_copy~
 - ~rotate~
 - ~rotate_copy~
 - ~search~
 - ~search_n~
 - ~set_difference~
 - ~set_intersection~
 - ~set_symmetric_difference~
 - ~set_union~
 - ~shuffle~
 - ~sort~
 - ~sort_heap~
 - ~stable_partition~
 - ~stable_sort~
 - ~swap~
 - ~swap_ranges~
 - ~transform~
 - ~unique~
 - ~unique_copy~
 - ~upper_bound~
#+REVEAL_HTML: </div></div>

#+ATTR_REVEAL: :frag appear
Of 90 total, 77 are basically "plain loops"

* The Most Powerful Algorithm?
#+ATTR_REVEAL: :frag appear
It's not even in ~<algorithm>~...
#+ATTR_REVEAL: :frag appear
APL calls it ~/~
#+ATTR_REVEAL: :frag appear
Many languages call it ~reduce~
#+ATTR_REVEAL: :frag appear
C++ calls it ~accumulate~ (or ~reduce~ in C++17, basically the same)

* ~std::accumulate~
#+REVEAL_HTML: <br/>
#+BEGIN_SRC cpp
template <class InputIt, class T, class BinaryOp>
T accumulate(InputIt first, InputIt last,
             T init, BinaryOp op)
{
  for (; first != last; ++first) {
    init = op(init, *first);
  }
  return init;
}
#+END_SRC
#+REVEAL_HTML: <br/>
"In the range [ ~first~, ~last~ ], ~binary_op~ shall neither modify elements nor invalidate iterators or subranges."

* accumulate
with plus -> sum
with multiply -> factorial
count
min/max

inner_product

show generated code

* more accumulations
ditch the "shall not modify elements" proviso

for_each
copy
transform
remove/replace/etc

* accumulate_iter
max_element
(safe form of same)

* surprising forms
shuffle

reverse (with relaxed iterator category)
likewise copy_backward, move_backward

foldr with reverse iterators?

* other applications
functions that return bool
functions that return int
functions that alter a data structure (insert/remove items)
turn binary functions into n-ary functions
infinite streams?

* balanced reduction
McCarthy, Knuth, EoP chapter 11

* fold expressions?

* tree folds?

* heterogeneous sequences
logging
foldads

* binary search?
